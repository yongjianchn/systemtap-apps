/* server.stp
 * Management for server:
 *   1. define server_info struct
 *   2. manage all servers using rbTree: insert\find\show
 *   3. parse ip from a user-defined file
 */

%{
	#include <linux/kernel.h>
	#include <linux/fs.h>
	#include <linux/mm.h>
	#include <asm/uaccess.h>
	#include <linux/proc_fs.h>
	#include <linux/seq_file.h>
	#include <linux/sched.h>
	#include <linux/kthread.h>

	/* Records for One Server */
	struct server_info {
		long ip;
		atomic64_t req_lost_count;
		atomic64_t resp_lost_count;
		atomic64_t resp_null_count;
		atomic64_t total_count;
		struct rb_node node;
	};

	/* Records for All Servers, Using rbtree to manage */
	long ips[10000];
	int ip_num;
	int server_create = 0;
	int server_true = 0;
	int server_true_free = 0;
	int server_other_free= 0;
	struct rb_root servertree = RB_ROOT;

	/* Find one server in rbtree using ip */
	struct server_info *find_server(struct rb_root *root, long ip)
	{
		struct rb_node *node = root->rb_node;

		while (node) {
			struct server_info *server = container_of(node,
					struct server_info, node);
			if (ip < server->ip)
				node = node->rb_left;
			else if (ip > server->ip)
				node = node->rb_right;
			else
				return server;
		}
		return NULL;
	}

	/* Insert one server into rbtree */
	int insert_server(struct rb_root *root, struct server_info *server)
	{
		struct rb_node **node = &(root->rb_node), *parent = NULL;

		while (*node) {
			struct server_info *this = container_of(*node,
					struct server_info, node);
			parent = *node;
			if (server->ip < this->ip)
				node = &((*node)->rb_left);
			else if (server->ip > this->ip)
				node = &((*node)->rb_right);
			else
				return -1;
		}

		rb_link_node(&server->node, parent, node);
		rb_insert_color(&server->node, root);
		return 0;
	}

	/* Free Memory: erase the rbtree and all server_info */
	void free_all_servers(void)
	{
		int i;
		long ip;
		struct server_info *server;

		for (i = 0; i < ip_num; i++) {
			ip = ips[i];
			server = find_server(&servertree, ip);
			if (server) {
				rb_erase(&server->node, &servertree);
				kfree(server);
				server_true_free++;
			}
		}
	}

	/* Read ip-list from a user-defined file
	 * stap_ipfile is the file which contains ip
	 */
	static struct task_struct * thread_readfile = NULL;

	static int parse_ipfile_thread(void *data);

	static int parse_ips(void) {
		int i = 0;
		long ip = 0;

		for (i = 0; i < ips_str_len; i++) {
			char this = stap_ips_str[i];
			if (this == ',') {
				struct server_info *server =
					kzalloc(sizeof(struct server_info), GFP_ATOMIC);
				if (server == NULL) {
					printk("[tcpdive-fc] kzalloc failed.\n");
					return -1;
				}
				server_create++;
				server->ip = ip;
				/* Find a new IP */
				if(0 == insert_server(&servertree, server)) {
					ips[ip_num++] = ip;
					server_true++;
				} else {
					kfree(server);
					server_other_free++;
				}
				ip = 0;
			} else {
				ip = ip * 10 + (this - '0');/* string to long */
			}
		}
		return 0;
	}

	static int parse_ipfile(void) {
		thread_readfile = kthread_run(parse_ipfile_thread, "readfile", "readfile");
		if (IS_ERR(thread_readfile)) {
			printk("[tcpdive] thread create failed...\n");
			thread_readfile = NULL;
			return -1;
		}

		return 0;
	}

	static int parse_ipfile_thread(void *data) {
		struct file *filp;
		struct inode *inode;
		mm_segment_t fs;
		off_t fsize;
		char *buf;
		int i;
		long ip = 0;
		loff_t pos = 0;

		/* Dangerous: if stap_ipfile not exist, kernel will panic! */
		filp = filp_open(stap_ipfile, O_RDONLY, 0);
		if (IS_ERR(filp)) {
			printk("[tcpdive-fc] ipfile open failed.\n");
			return -1;
		}

		inode = filp->f_dentry->d_inode;
		fsize =inode->i_size;
		buf = (char *)kzalloc(fsize + 1, GFP_ATOMIC);
		if (buf == NULL) {
			printk("[tcpdive-fc] kzalloc failed.\n");
			return -1;
		}

		pos = 0;
		kernel_read(filp, pos, buf, fsize);
		filp_close(filp, NULL);

		for (i = 0; i < fsize; i++) {
			char this = buf[i];
			if (this == '\n') {
				struct server_info *server =
					kzalloc(sizeof(struct server_info), GFP_ATOMIC);
				if (server == NULL) {
					printk("[tcpdive-fc] kzalloc failed.\n");
					return -1;
				}
				server_create++;
				server->ip = ip;
				/* Find a new IP */
				if(0 == insert_server(&servertree, server)) {
					ips[ip_num++] = ip;
					server_true++;
				} else {
					kfree(server);
					server_other_free++;
				}
				ip = 0;
			} else {
				ip = ip * 10 + (this - '0');/* string to long */
			}
		}
		kfree(buf);

#ifdef DEBUG_TCPDIVE
		for (i = 0; i < ip_num; i++) {
			printk("ip[%d]: %ld\n", i, ips[i]);
		}
#endif

		do_exit(0);
		return 0;
	}

	#define PROCFS_NAME        "tcpdive-fc"
	static struct proc_dir_entry *tcpdive_file;

	static int serverinfo_show(struct seq_file *seq_f, void *v)
	{
		int i = 0;
		u32 ip;
		long ip_long;
		__be32 ip_be32;
		long total_count, req_lost_count, resp_lost_count, resp_null_count;
		char format_ip[16];

		for (; i < ip_num; i++) {
			ip = ips[i];
			ip_long = htonl(ip);
			ip_be32 = (__be32)ip_long;
			total_count     = atomic64_read(&(find_server(&servertree, ip))->total_count);
			req_lost_count  = atomic64_read(&(find_server(&servertree, ip))->req_lost_count);
			resp_lost_count = atomic64_read(&(find_server(&servertree, ip))->resp_lost_count);
			resp_null_count = atomic64_read(&(find_server(&servertree, ip))->resp_null_count);
			snprintf(format_ip, 15, NIPQUAD_FMT, NIPQUAD(ip_be32));

			seq_printf(seq_f, "IP: %15s, total: %12ld, req_lost: %10ld, resp_lost: %10ld, no_resp: %10ld\n",
				format_ip, total_count, req_lost_count, resp_lost_count, resp_null_count);
		}
		return 0;
	}

	static int serverinfo_open(struct inode *inode, struct file *file)
	{
		return single_open(file, serverinfo_show, NULL);
	}

	static const struct file_operations proc_fops = {
		.owner = THIS_MODULE,
		.open = serverinfo_open,
		.read = seq_read,
		.llseek = seq_lseek,
		.release = single_release,
	};

	static int init_procfile(void)
	{
		tcpdive_file = proc_create(PROCFS_NAME, 0, NULL, &proc_fops);

		if (tcpdive_file == NULL) {
			remove_proc_entry(PROCFS_NAME, NULL);
			printk(KERN_ALERT "ERROR: Could not initialize /proc/%s\n",
					PROCFS_NAME);
			return -ENOMEM;
		}

		printk(KERN_INFO "/proc/%s created in procfs\n", PROCFS_NAME);
		return 0;
	}

	static void cleanup_procfile(void)
	{
		remove_proc_entry(PROCFS_NAME, NULL);
		printk(KERN_INFO "/proc/%s removed\n", PROCFS_NAME);
	}
%}

function setup_servers ()
%{
	//parse_ipfile();
	parse_ips();
	init_procfile();
%}

function show_all_servers ()
{
	i = 0
	ip_num = %{ip_num%}

	printf("\n########## Total: %d IP ##########\n", ip_num)
	for (; i < ip_num; i++) {
		ip = %{ips[STAP_ARG_i]%}
		total_count = %{atomic64_read(&(find_server(&servertree, STAP_ARG_ip))->total_count)%}
		req_lost_count = %{atomic64_read(&(find_server(&servertree, STAP_ARG_ip))->req_lost_count)%}
		resp_lost_count = %{atomic64_read(&(find_server(&servertree, STAP_ARG_ip))->resp_lost_count)%}
		resp_null_count = %{atomic64_read(&(find_server(&servertree, STAP_ARG_ip))->resp_null_count)%}
		format_ip = sprintf("%s", ip_ntop(htonl(ip)))

		printf("IP: %15s, total: %12d, req_lost: %10d, resp_lost: %10d, no_resp: %10d\n",
			format_ip, total_count, req_lost_count, resp_lost_count, resp_null_count)
	}
	printf("########## Total: %d IP ##########\n", ip_num)
}

function clean_servers ()
%{
	cleanup_procfile();
	free_all_servers();
%}
