%{
	#include <linux/tcp.h>
	#include <net/tcp.h>
	#include <linux/timer.h>

	struct stap_info;
	typedef int (*stap_func)(struct sock *sk, int urgent);
	stap_func stap_send_probe;

	int stap_tcp_request_time = 0;

	int stap_init_tcp_req_timer(void)
	{
		stap_tcp_request_time  = stap_interval;
		stap_send_probe = (stap_func)kallsyms_lookup_name(
				"tcp_xmit_probe_skb");
		if (stap_send_probe == NULL)
			return -1;

		return 0;
	}

	/* req_timer handler */
	static void stap_tcp_request_timer(unsigned long data)
	{
		struct sock *sk = (struct sock *)data;
		struct stap_info *info = NULL;
		struct sk_buff *skb;

		bh_lock_sock(sk);
		spin_lock(&sk->stap_lock);

		/* Info has not been freed */
		info = sk->sk_protinfo;
		if (!info) {
			printk("[tcpdive-fc] [BUG] info is NULL in timer handler\n");
			goto unlock;
		}
		if (!atomic_read(&info->want_probe)) {
			atomic64_inc(&timer_stop_count_byself);
			atomic_set(&info->timer_done, 1);

			if (atomic_read(&info->timer_should_free_info)) {
				kfree(info);
				sk->sk_protinfo = NULL;
				atomic64_inc(&stap_free_intimer);
			}

			goto unlock;
		}

		sk_reset_timer(sk, &info->req_timer,
				jiffies + msecs_to_jiffies(stap_tcp_request_time));
		stap_send_probe(sk, 0);

	unlock:
		spin_unlock(&sk->stap_lock);
		bh_unlock_sock(sk);

	out:
		sock_put(sk);
	}
%}

probe analy.probe_ack =
	kernel.statement("tcp_ack@net/ipv4/tcp_input.c:3743")
{
	if (!$sk->sk_protinfo || is_mem_alloc_stop())
		next

	ret = do_probe_ack($sk, $skb)
	if (DEBUG && ret != 0)
		printf("[PROBE] result: %d\n", ret)
}

function do_probe_ack(sk:long, skb:long)
%{
	struct sock *sk = (struct sock *)STAP_ARG_sk;
	struct sk_buff *skb = (struct sk_buff *)STAP_ARG_skb;
	struct stap_info *info = NULL;
	struct timer_list *timer = NULL;
	u32 seq = TCP_SKB_CB(skb)->seq;
	u32 ack = TCP_SKB_CB(skb)->ack_seq;

	spin_lock(&sk->stap_lock);
	info = sk->sk_protinfo;
	if (!info)
		goto unlock;

	timer = &info->req_timer;
#ifdef DEBUG_TCPDIVE
	printk("probe_ack ->\n");
	printk("  recv ack: seq: %u, ack: %u, info->req_nxt: %u, info->synack_seq, %u\n",
			seq, ack, info->req_nxt, info->synack_seq);
#endif
	if (atomic_read(&info->want_probe)) {
		if (ack < info->req_nxt) { /* req has not been received */
			info->small_ack_count += 1;
			STAP_RETVALUE = -1;
			if (info->small_ack_count > info->req_pkt_num) {
				info->is_req_lost = 1;
				atomic_set(&info->want_probe, 0);
				STAP_RETVALUE = 1;
			}
		} else if (seq > info->synack_seq + 1) { /* resp has been sent */
			info->is_resp_lost = 1;
			info->is_resp_null = 0;
			atomic_set(&info->want_probe, 0);
			STAP_RETVALUE = 2;
		} else {
			info->is_resp_null = 1;
			STAP_RETVALUE = 3;
		}
	}
#ifdef DEBUG_TCPDIVE
	printk("<- probe_ack\n");
#endif

unlock:
	spin_unlock(&sk->stap_lock);
%}
